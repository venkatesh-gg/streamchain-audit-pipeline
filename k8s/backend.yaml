apiVersion: apps/v1
kind: Deployment
metadata:
  name: fastapi-backend
  namespace: analytics-pipeline
  labels:
    app: fastapi-backend
spec:
  replicas: 3
  selector:
    matchLabels:
      app: fastapi-backend
  template:
    metadata:
      labels:
        app: fastapi-backend
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8000"
        prometheus.io/path: "/metrics"
    spec:
      containers:
      - name: fastapi-backend
        image: analytics-pipeline/backend:latest
        ports:
        - containerPort: 8000
        env:
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: database-secret
              key: url
        - name: ELASTICSEARCH_URL
          valueFrom:
            configMapKeyRef:
              name: pipeline-config
              key: ELASTICSEARCH_URL
        - name: KAFKA_BOOTSTRAP_SERVERS
          valueFrom:
            configMapKeyRef:
              name: pipeline-config
              key: KAFKA_BOOTSTRAP_SERVERS
        - name: ETHEREUM_RPC_URL
          valueFrom:
            configMapKeyRef:
              name: pipeline-config
              key: ETHEREUM_RPC_URL
        - name: IPFS_API_URL
          valueFrom:
            configMapKeyRef:
              name: pipeline-config
              key: IPFS_API_URL
        - name: LOG_LEVEL
          valueFrom:
            configMapKeyRef:
              name: pipeline-config
              key: LOG_LEVEL
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "1Gi"
            cpu: "500m"
        livenessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          httpGet:
            path: /health
            port: 8000
          initialDelaySeconds: 5
          periodSeconds: 5
        securityContext:
          runAsNonRoot: true
          runAsUser: 1000
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
        volumeMounts:
        - name: tmp-volume
          mountPath: /tmp
      volumes:
      - name: tmp-volume
        emptyDir: {}
---
apiVersion: v1
kind: Service
metadata:
  name: fastapi-backend
  namespace: analytics-pipeline
  labels:
    app: fastapi-backend
spec:
  selector:
    app: fastapi-backend
  ports:
  - name: http
    port: 8000
    targetPort: 8000
  type: ClusterIP
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: backend-ingress
  namespace: analytics-pipeline
  annotations:
    kubernetes.io/ingress.class: "nginx"
    nginx.ingress.kubernetes.io/cors-allow-origin: "*"
    nginx.ingress.kubernetes.io/cors-allow-methods: "GET, POST, PUT, DELETE, OPTIONS"
    nginx.ingress.kubernetes.io/cors-allow-headers: "DNT,User-Agent,X-Requested-With,If-Modified-Since,Cache-Control,Content-Type,Range,Authorization"
    nginx.ingress.kubernetes.io/enable-cors: "true"
    cert-manager.io/cluster-issuer: "letsencrypt-prod"
spec:
  tls:
  - hosts:
    - api.analytics-pipeline.com
    secretName: backend-tls
  rules:
  - host: api.analytics-pipeline.com
    http:
      paths:
      - path: /
        pathType: Prefix
        backend:
          service:
            name: fastapi-backend
            port:
              number: 8000
---
apiVersion: v1
kind: Secret
metadata:
  name: database-secret
  namespace: analytics-pipeline
type: Opaque
data:
  url: cG9zdGdyZXNxbDovL2FuYWx5dGljc191c2VyOmFuYWx5dGljc19wYXNzd29yZEBwb3N0Z3Jlczo1NDMyL2FuYWx5dGljc19kYg==