version: '3.8'

services:
  # Kafka Infrastructure
  zookeeper:
    image: confluentinc/cp-zookeeper:7.4.0
    hostname: zookeeper
    container_name: zookeeper
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-logs:/var/lib/zookeeper/log

  kafka:
    image: confluentinc/cp-kafka:7.4.0
    hostname: kafka
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
      - "9101:9101"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_JMX_PORT: 9101
      KAFKA_JMX_HOSTNAME: localhost
    volumes:
      - kafka-data:/var/lib/kafka/data

  # Database Services
  postgres:
    image: postgres:15-alpine
    hostname: postgres
    container_name: postgres
    ports:
      - "5432:5432"
    environment:
      POSTGRES_DB: analytics_db
      POSTGRES_USER: analytics_user
      POSTGRES_PASSWORD: analytics_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./sql/init.sql:/docker-entrypoint-initdb.d/init.sql

  elasticsearch:
    image: docker.elastic.co/elasticsearch/elasticsearch:8.10.0
    hostname: elasticsearch
    container_name: elasticsearch
    ports:
      - "9200:9200"
      - "9300:9300"
    environment:
      - discovery.type=single-node
      - xpack.security.enabled=false
      - "ES_JAVA_OPTS=-Xms512m -Xmx512m"
    volumes:
      - elasticsearch-data:/usr/share/elasticsearch/data

  # IPFS Node
  ipfs:
    image: ipfs/kubo:latest
    hostname: ipfs
    container_name: ipfs
    ports:
      - "4001:4001"
      - "5001:5001"
      - "8080:8080"
    volumes:
      - ipfs-data:/data/ipfs

  # Blockchain Infrastructure
  ethereum-node:
    image: ethereum/client-go:latest
    hostname: ethereum-node
    container_name: ethereum-node
    ports:
      - "8545:8545"
      - "8546:8546"
      - "30303:30303"
    command: >
      --dev
      --http
      --http.addr=0.0.0.0
      --http.port=8545
      --http.api=eth,net,web3,personal,miner
      --ws
      --ws.addr=0.0.0.0
      --ws.port=8546
      --ws.api=eth,net,web3
      --allow-insecure-unlock
      --rpc.allow-unprotected-txs
    volumes:
      - ethereum-data:/root/.ethereum

  # Stream Processing
  flink-jobmanager:
    image: flink:1.17.1-scala_2.12
    hostname: flink-jobmanager
    container_name: flink-jobmanager
    ports:
      - "8081:8081"
    command: jobmanager
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        parallelism.default: 2
    volumes:
      - ./flink-jobs:/opt/flink/jobs

  flink-taskmanager:
    image: flink:1.17.1-scala_2.12
    hostname: flink-taskmanager
    container_name: flink-taskmanager
    depends_on:
      - flink-jobmanager
    command: taskmanager
    scale: 1
    environment:
      - |
        FLINK_PROPERTIES=
        jobmanager.rpc.address: flink-jobmanager
        taskmanager.numberOfTaskSlots: 2
        parallelism.default: 2
    volumes:
      - ./flink-jobs:/opt/flink/jobs

  # API Backend
  fastapi-backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
    hostname: fastapi-backend
    container_name: fastapi-backend
    ports:
      - "8000:8000"
    depends_on:
      - postgres
      - elasticsearch
      - kafka
    environment:
      - DATABASE_URL=postgresql://analytics_user:analytics_password@postgres:5432/analytics_db
      - ELASTICSEARCH_URL=http://elasticsearch:9200
      - KAFKA_BOOTSTRAP_SERVERS=kafka:29092
      - ETHEREUM_RPC_URL=http://ethereum-node:8545
      - IPFS_API_URL=http://ipfs:5001
    volumes:
      - ./backend:/app

  # Frontend
  angular-frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    hostname: angular-frontend
    container_name: angular-frontend
    ports:
      - "4200:4200"
    depends_on:
      - fastapi-backend
    environment:
      - API_BASE_URL=http://localhost:8000
    volumes:
      - ./frontend:/app
      - /app/node_modules

  # Monitoring
  prometheus:
    image: prom/prometheus:latest
    hostname: prometheus
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus-data:/prometheus

  grafana:
    image: grafana/grafana:latest
    hostname: grafana
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
    volumes:
      - grafana-data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources

volumes:
  zookeeper-data:
  zookeeper-logs:
  kafka-data:
  postgres-data:
  elasticsearch-data:
  ipfs-data:
  ethereum-data:
  prometheus-data:
  grafana-data:

networks:
  default:
    name: analytics-network